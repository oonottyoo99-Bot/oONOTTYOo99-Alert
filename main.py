# main.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Hybrid ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web Service + Scanner)
import os
import yfinance as yf
import pandas_ta as ta
import telegram
import asyncio
from fastapi import FastAPI

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
TICKERS_TO_SCAN = [
    "BTC-USD", "ETH-USD", "SOL-USD", "XRP-USD",
    "SPY", "QQQ", "VOO",
    "AAPL", "MSFT", "GOOGL", "TSLA", "NVDA"
]
VOLUME_MULTIPLIER = 2.0
TIME_FRAME = "1d"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
async def send_telegram_message(message: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("Error: ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TELEGRAM_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ TELEGRAM_CHAT_ID")
        return
    try:
        bot = telegram.Bot(token=TELEGRAM_TOKEN)
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='Markdown')
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {message}")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {e}")

async def analyze_ticker(ticker: str):
    print(f"--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {ticker} ---")
    try:
        data = yf.download(ticker, period="200d", interval=TIME_FRAME, progress=False)
        if data.empty: return

        data.ta.ema(length=100, append=True, col_names=('EMA100'))
        data.ta.ema(length=200, append=True, col_names=('EMA200'))
        data.ta.rsi(length=14, append=True, col_names=('RSI_14'))
        data.ta.macd(fast=12, slow=26, signal=9, append=True, col_names=('MACD', 'MACDh', 'MACDs'))
        data.ta.sma(length=20, close='Volume', append=True, col_names=('Volume_SMA20'))
        
        latest = data.iloc[-1]
        
        is_volume_spike = latest['Volume'] > (latest['Volume_SMA20'] * VOLUME_MULTIPLIER)
        if is_volume_spike:
            await send_telegram_message(f"üîî *Volume Spike Alert!*\n*{ticker}* ({TIME_FRAME})")

        is_above_emas = latest['Close'] > latest['EMA100'] and latest['Close'] > latest['EMA200']
        is_rsi_strong = latest['RSI_14'] > 55
        is_macd_positive = latest['MACD'] > latest['MACDs']
        
        if is_above_emas and is_rsi_strong and is_macd_positive and is_volume_spike:
            await send_telegram_message(f"üöÄ *Strong Buy Signal!*\n*{ticker}* ({TIME_FRAME})\n‡∏£‡∏≤‡∏Ñ‡∏≤: {latest['Close']:.2f}")

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {ticker}: {e}")

async def run_scan():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á"""
    print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà ---")
    for ticker in TICKERS_TO_SCAN:
        await analyze_ticker(ticker)
    print("--- ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ---")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Web Server (‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà) ---
app = FastAPI()

@app.get("/")
def home():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    return {"status": "API is online and ready. The real work happens at /run_scan."}

@app.get("/run_scan")
async def trigger_scan():
    """
    Endpoint ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ cron-job.org ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å (‡∏õ‡∏•‡∏∏‡∏Å)
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ run_scan() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
    ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏õ‡∏•‡∏∏‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ô‡∏≤‡∏ô
    """
    print("Scan triggered by external job.")
    # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
    asyncio.create_task(run_scan())
    # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    return {"status": "Scan triggered successfully in the background."}
