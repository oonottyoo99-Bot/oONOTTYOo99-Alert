import os
from fastapi import FastAPI, Request
import telegram
import uvicorn

# --- ‡πÇ‡∏´‡∏•‡∏î Token ‡πÅ‡∏•‡∏∞ Chat ID ‡∏à‡∏≤‡∏Å Environment Variables ‡∏ö‡∏ô Railway ---
# ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö Railway ‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Token ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TELEGRAM_TOKEN ‡πÅ‡∏•‡∏∞ TELEGRAM_CHAT_ID ‡∏ö‡∏ô Railway")

bot = telegram.Bot(token=TELEGRAM_TOKEN)
app = FastAPI()

@app.get("/")
def read_root():
    return {"Status": "API is running!"}

@app.post("/webhook/tradingview")
async def tradingview_webhook(request: Request):
    """
    Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å TradingView Alert
    """
    data = await request.body()
    message_from_tv = data.decode('utf-8')

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ Telegram
    final_message = f"üîî **TradingView Alert** üîî\n\n{message_from_tv}"

    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=final_message, parse_mode='Markdown')
        print(f"Sent to Telegram: {final_message}")
        return {"status": "ok"}
    except Exception as e:
        print(f"Error sending to Telegram: {e}")
        return {"status": "error", "reason": str(e)}

# ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Railway ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢ port ‡∏≠‡∏∞‡πÑ‡∏£
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))

    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=True)
